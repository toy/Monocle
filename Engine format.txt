/**

In the Monocle preferences, the key `engines` stores an array of dictionaries. Every dictionary in this array is an engine. This dictionary dictates the engine's properties as a series of key-value pairs.

An engine may be supported by the built-in Monocle logic and simply be a URL-based engine, or it may provide its own logic in a plugin, possibly working with  custom-defined properties, to provide searching or launching beyond the scope of the original Monocle concept.

# Supported properties

## Legend

`(m)` = mandatory. Anything that's not specifically marked as mandatory is *optional*. If the property is not mandatory, a `@default x` marker tells you what the default value this property might have. (If `x` is `nil`, this represents the lack of a value.) 

`@type x` = specifies of what type the property value is in. Anything else than `string`, `int`, `float`, `bool` or `dict` is presumed to be archived in an NSData object, and `x` is presumed to be the class name of the unarchived object. (The other types are storable without archiving trickery inside standard Mac OS X property lists, and will map to standard Cocoa classes.)

Any keys marked with `(i)` pertain to implementation details, and any keys marked with `(ui)` especially pertain to the appearence of the engine in ways that are not crucial to the implementation of searching.

## Core properties:

    `name` (m)
        @type string
        The engine's name.
    
    `type` (m) (i)
        @type string    
        The type of engine.    
        There are two built-in types: `GET` and `POST`, which both signify HTTP queries using the respective verb.    
        The type is extensible: any other type is interpreted as the bundle identifier for an engine plugin subclassing the MonocleSearchEngine class, packed in a .searchPlugin bundle and placed in Library/Application Support/Monocle in any of the domains, or inside the Plug-ins folder of Monocle's internal Contents folder. A shipping example is the Spotlight plugin. 
    
    `extraInfo` (i)
        @type string    
        @default nil    
        Additional info about the engine, intended as a commentary field for Monocle users.    
        For distribution of engine sets (including presets), it's considered good practice to set this to a very brief explanatory text describing the search engine.

## Appearence properties:

    `icon` (ui)
        @type NSImage
        @default nil
        An icon associated with the engine. It's considered good practice to assign the `favicon` of the search engine, if at all possible. The icon is always available for modification by the user.
    
    `color` (ui)
        @type NSColor
        @default nil
        A color associated with the engine. It's considered good practice to never assign a color for a search engine. The color is always available for modification by the user.
        
    `meshBadging` (ui)
        @type bool
        @default YES
        If YES, specifies that the color specified with `color` should be badged on top of any possible `icon` in the bottom right quadrant. (If NO, the color will just tint the image.)
        This property doesn't do anything if either the color or icon are missing.

    
## GET properties:

    `get_URL` (i) ((m) for GET or POST type engines)
        @type string
        The URL to the search engine. %@ is replaced by the encoded search query according to the rules in `get_spaceTransmutation`.
    
    `get_spaceTransmutation` (i)
        @type string
        @default `percent`
        The routine used to encode spaces when encoding the search query for injection into the URL. One of the following:
        `percent`: Ordinary URL percent encoding like the rest of the query.
        `underscore`: Every space is replaced by the `_` character.

## POST properties:

All GET properties are also valid for POST engines. Note that a valid POST engine must have the GET property `get_URL`. See `GET properties` above.

    `post_data`
        @type dict
        @default nil
        If given, contains a dictionary of key/value pairs to be passed as POST data. %@ in any value will be replaced by the encoded search query according to the rules in `get_spaceTransmutation`.
        This key is not mandatory (m) since some engines may potentially require the POST method but pass data through the `get_URL` property.

## Plugin-based external property guidelines

The properties must start with a version of the bundle identifier that exchanges all `.` characters for `_` characters (to not disrupt key-value coding). Between this bungled bundle identifier and the property key will be `__` - that is two `_` characters.

For example, if Apple was to make a Spotlight Monocle plugin (psh, yeah, if!), their bundle identifier might look like this:

    com.apple.spotlight.monocle-plugin

If they were to have a setting called `allowPDFs`, their property key would look like this:

    com_apple_spotlight_monocle-plugin__allowPDFs

Prefixing the bundle identifier may be dementrial to the aesthetics of the property key, but it helps prevent mixups.

Plugins may describe as many properties as they'd like, but it is preferable to have as few as possible.

**/